// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: purchaseSchedule.sql

package db

import (
	"context"
	"time"
)

const createPurchaseSchedule = `-- name: CreatePurchaseSchedule :one
INSERT INTO  "purchaseSchedule" (
  "buyId",
  "stage",
  "created_order_buy"
) values (
  $1,
  $2,
  $3
)
RETURNING id, "buyId", stage, created_order_buy, created_at
`

type CreatePurchaseScheduleParams struct {
	BuyId           int64     `json:"buyId"`
	Stage           string    `json:"stage"`
	CreatedOrderBuy time.Time `json:"createdOrderBuy"`
}

func (q *Queries) CreatePurchaseSchedule(ctx context.Context, arg CreatePurchaseScheduleParams) (PurchaseSchedule, error) {
	row := q.db.QueryRowContext(ctx, createPurchaseSchedule, arg.BuyId, arg.Stage, arg.CreatedOrderBuy)
	var i PurchaseSchedule
	err := row.Scan(
		&i.ID,
		&i.BuyId,
		&i.Stage,
		&i.CreatedOrderBuy,
		&i.CreatedAt,
	)
	return i, err
}

const getAllPurchaseSchedule = `-- name: GetAllPurchaseSchedule :many
SELECT id, "buyId", stage, created_order_buy, created_at FROM "purchaseSchedule"
`

func (q *Queries) GetAllPurchaseSchedule(ctx context.Context) ([]PurchaseSchedule, error) {
	rows, err := q.db.QueryContext(ctx, getAllPurchaseSchedule)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PurchaseSchedule{}
	for rows.Next() {
		var i PurchaseSchedule
		if err := rows.Scan(
			&i.ID,
			&i.BuyId,
			&i.Stage,
			&i.CreatedOrderBuy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPurchaseScheduleById = `-- name: GetPurchaseScheduleById :one
SELECT id, "buyId", stage, created_order_buy, created_at FROM "purchaseSchedule" WHERE id = $1
`

func (q *Queries) GetPurchaseScheduleById(ctx context.Context, id int64) (PurchaseSchedule, error) {
	row := q.db.QueryRowContext(ctx, getPurchaseScheduleById, id)
	var i PurchaseSchedule
	err := row.Scan(
		&i.ID,
		&i.BuyId,
		&i.Stage,
		&i.CreatedOrderBuy,
		&i.CreatedAt,
	)
	return i, err
}

const updatePurchaseSchedule = `-- name: UpdatePurchaseSchedule :one
UPDATE "purchaseSchedule" SET
  "buyId" = COALESCE($1, "buyId"),
  "stage" = COALESCE($2, "stage"),
  "created_order_buy" = COALESCE($3, "created_order_buy")
WHERE id = $4
RETURNING id, "buyId", stage, created_order_buy, created_at
`

type UpdatePurchaseScheduleParams struct {
	BuyId           int64     `json:"buyId"`
	Stage           string    `json:"stage"`
	CreatedOrderBuy time.Time `json:"createdOrderBuy"`
	ID              int64     `json:"id"`
}

func (q *Queries) UpdatePurchaseSchedule(ctx context.Context, arg UpdatePurchaseScheduleParams) (PurchaseSchedule, error) {
	row := q.db.QueryRowContext(ctx, updatePurchaseSchedule,
		arg.BuyId,
		arg.Stage,
		arg.CreatedOrderBuy,
		arg.ID,
	)
	var i PurchaseSchedule
	err := row.Scan(
		&i.ID,
		&i.BuyId,
		&i.Stage,
		&i.CreatedOrderBuy,
		&i.CreatedAt,
	)
	return i, err
}
