// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: player.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const countPlayers = `-- name: CountPlayers :one
SELECT count(*) FROM players
`

func (q *Queries) CountPlayers(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countPlayers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createProduct = `-- name: CreateProduct :one
INSERT INTO players (
  username,
  hashed_password,
  full_name,
  cash,
  email
) values (
  $1,
  $2,
  $3,
  $4,
  $5
) 
RETURNING id, username, hashed_password, full_name, cash, email, password_changed_at, created_at
`

type CreateProductParams struct {
	Username       sql.NullString `json:"username"`
	HashedPassword string         `json:"hashedPassword"`
	FullName       string         `json:"fullName"`
	Cash           interface{}    `json:"cash"`
	Email          string         `json:"email"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Player, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.Username,
		arg.HashedPassword,
		arg.FullName,
		arg.Cash,
		arg.Email,
	)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Cash,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deletePlayer = `-- name: DeletePlayer :exec
DELETE FROM players WHERE id = $1
`

func (q *Queries) DeletePlayer(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePlayer, id)
	return err
}

const getPlayerByEmail = `-- name: GetPlayerByEmail :one
SELECT id, username, hashed_password, full_name, cash, email, password_changed_at, created_at FROM players WHERE email = $1
`

func (q *Queries) GetPlayerByEmail(ctx context.Context, email string) (Player, error) {
	row := q.db.QueryRowContext(ctx, getPlayerByEmail, email)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Cash,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getPlayerById = `-- name: GetPlayerById :one
SELECT id, username, hashed_password, full_name, cash, email, password_changed_at, created_at FROM players WHERE id = $1
`

func (q *Queries) GetPlayerById(ctx context.Context, id int64) (Player, error) {
	row := q.db.QueryRowContext(ctx, getPlayerById, id)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Cash,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getPlayerByUsername = `-- name: GetPlayerByUsername :one
SELECT id, username, hashed_password, full_name, cash, email, password_changed_at, created_at FROM players WHERE username = $1
`

func (q *Queries) GetPlayerByUsername(ctx context.Context, username sql.NullString) (Player, error) {
	row := q.db.QueryRowContext(ctx, getPlayerByUsername, username)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Cash,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listPlayers = `-- name: ListPlayers :many
SELECT id, username, hashed_password, full_name, cash, email, password_changed_at, created_at FROM players LIMIT $1 OFFSET $2
`

type ListPlayersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPlayers(ctx context.Context, arg ListPlayersParams) ([]Player, error) {
	rows, err := q.db.QueryContext(ctx, listPlayers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Player{}
	for rows.Next() {
		var i Player
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.HashedPassword,
			&i.FullName,
			&i.Cash,
			&i.Email,
			&i.PasswordChangedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const rankPlayers = `-- name: RankPlayers :many
SELECT id, username, hashed_password, full_name, cash, email, password_changed_at, created_at FROM players ORDER BY cash DESC LIMIT $1 OFFSET $2
`

type RankPlayersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) RankPlayers(ctx context.Context, arg RankPlayersParams) ([]Player, error) {
	rows, err := q.db.QueryContext(ctx, rankPlayers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Player{}
	for rows.Next() {
		var i Player
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.HashedPassword,
			&i.FullName,
			&i.Cash,
			&i.Email,
			&i.PasswordChangedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePlayer = `-- name: UpdatePlayer :one
UPDATE players SET
  username = COALESCE($1, username),
  hashed_password = COALESCE($2, hashed_password),
  full_name = COALESCE($3, full_name),
  cash = COALESCE($4, cash),
  email = COALESCE($5, email),
  password_changed_at = COALESCE($6, password_changed_at),
  created_at = COALESCE($7, created_at)
WHERE id = $8
RETURNING id, username, hashed_password, full_name, cash, email, password_changed_at, created_at
`

type UpdatePlayerParams struct {
	Username          sql.NullString `json:"username"`
	HashedPassword    string         `json:"hashedPassword"`
	FullName          string         `json:"fullName"`
	Cash              interface{}    `json:"cash"`
	Email             string         `json:"email"`
	PasswordChangedAt time.Time      `json:"passwordChangedAt"`
	CreatedAt         time.Time      `json:"createdAt"`
	ID                int64          `json:"id"`
}

func (q *Queries) UpdatePlayer(ctx context.Context, arg UpdatePlayerParams) (Player, error) {
	row := q.db.QueryRowContext(ctx, updatePlayer,
		arg.Username,
		arg.HashedPassword,
		arg.FullName,
		arg.Cash,
		arg.Email,
		arg.PasswordChangedAt,
		arg.CreatedAt,
		arg.ID,
	)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Cash,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}
