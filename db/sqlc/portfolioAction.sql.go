// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: portfolioAction.sql

package db

import (
	"context"
)

const countPortfolioActions = `-- name: countPortfolioActions :one
SELECT count(*) FROM "portfolioActions"
`

func (q *Queries) countPortfolioActions(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countPortfolioActions)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createPortfolioAction = `-- name: createPortfolioAction :one
INSERT INTO "portfolioActions" (
  portfolio_id,
  action_id,
  player_id,
  quantity,
  purchase_price
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5
) RETURNING id, portfolio_id, action_id, player_id, quantity, purchase_price, created_at
`

type createPortfolioActionParams struct {
	PortfolioID   int64  `json:"portfolioID"`
	ActionID      int64  `json:"actionID"`
	PlayerID      int64  `json:"playerID"`
	Quantity      int32  `json:"quantity"`
	PurchasePrice string `json:"purchasePrice"`
}

func (q *Queries) createPortfolioAction(ctx context.Context, arg createPortfolioActionParams) (PortfolioAction, error) {
	row := q.db.QueryRowContext(ctx, createPortfolioAction,
		arg.PortfolioID,
		arg.ActionID,
		arg.PlayerID,
		arg.Quantity,
		arg.PurchasePrice,
	)
	var i PortfolioAction
	err := row.Scan(
		&i.ID,
		&i.PortfolioID,
		&i.ActionID,
		&i.PlayerID,
		&i.Quantity,
		&i.PurchasePrice,
		&i.CreatedAt,
	)
	return i, err
}

const deletePortfolioAction = `-- name: deletePortfolioAction :one
DELETE FROM "portfolioActions" WHERE id = $1 RETURNING id, portfolio_id, action_id, player_id, quantity, purchase_price, created_at
`

func (q *Queries) deletePortfolioAction(ctx context.Context, id int32) (PortfolioAction, error) {
	row := q.db.QueryRowContext(ctx, deletePortfolioAction, id)
	var i PortfolioAction
	err := row.Scan(
		&i.ID,
		&i.PortfolioID,
		&i.ActionID,
		&i.PlayerID,
		&i.Quantity,
		&i.PurchasePrice,
		&i.CreatedAt,
	)
	return i, err
}

const getPortfolioActionByAction_id = `-- name: getPortfolioActionByAction_id :many
SELECT id, portfolio_id, action_id, player_id, quantity, purchase_price, created_at FROM "portfolioActions" WHERE action_id = $1
`

func (q *Queries) getPortfolioActionByAction_id(ctx context.Context, actionID int64) ([]PortfolioAction, error) {
	rows, err := q.db.QueryContext(ctx, getPortfolioActionByAction_id, actionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PortfolioAction{}
	for rows.Next() {
		var i PortfolioAction
		if err := rows.Scan(
			&i.ID,
			&i.PortfolioID,
			&i.ActionID,
			&i.PlayerID,
			&i.Quantity,
			&i.PurchasePrice,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPortfolioActionById = `-- name: getPortfolioActionById :one
SELECT id, portfolio_id, action_id, player_id, quantity, purchase_price, created_at FROM "portfolioActions" WHERE id = $1
`

func (q *Queries) getPortfolioActionById(ctx context.Context, id int32) (PortfolioAction, error) {
	row := q.db.QueryRowContext(ctx, getPortfolioActionById, id)
	var i PortfolioAction
	err := row.Scan(
		&i.ID,
		&i.PortfolioID,
		&i.ActionID,
		&i.PlayerID,
		&i.Quantity,
		&i.PurchasePrice,
		&i.CreatedAt,
	)
	return i, err
}

const getPortfolioActionByPlayer_id = `-- name: getPortfolioActionByPlayer_id :many
SELECT id, portfolio_id, action_id, player_id, quantity, purchase_price, created_at FROM "portfolioActions" WHERE player_id = $1
`

func (q *Queries) getPortfolioActionByPlayer_id(ctx context.Context, playerID int64) ([]PortfolioAction, error) {
	rows, err := q.db.QueryContext(ctx, getPortfolioActionByPlayer_id, playerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PortfolioAction{}
	for rows.Next() {
		var i PortfolioAction
		if err := rows.Scan(
			&i.ID,
			&i.PortfolioID,
			&i.ActionID,
			&i.PlayerID,
			&i.Quantity,
			&i.PurchasePrice,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPortfolioActionByPortfolio_id = `-- name: getPortfolioActionByPortfolio_id :many
SELECT id, portfolio_id, action_id, player_id, quantity, purchase_price, created_at FROM "portfolioActions" WHERE portfolio_id = $1
`

func (q *Queries) getPortfolioActionByPortfolio_id(ctx context.Context, portfolioID int64) ([]PortfolioAction, error) {
	rows, err := q.db.QueryContext(ctx, getPortfolioActionByPortfolio_id, portfolioID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PortfolioAction{}
	for rows.Next() {
		var i PortfolioAction
		if err := rows.Scan(
			&i.ID,
			&i.PortfolioID,
			&i.ActionID,
			&i.PlayerID,
			&i.Quantity,
			&i.PurchasePrice,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPortfolioActions = `-- name: listPortfolioActions :many
SELECT id, portfolio_id, action_id, player_id, quantity, purchase_price, created_at FROM "portfolioActions" LIMIT $1 OFFSET $2
`

type listPortfolioActionsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) listPortfolioActions(ctx context.Context, arg listPortfolioActionsParams) ([]PortfolioAction, error) {
	rows, err := q.db.QueryContext(ctx, listPortfolioActions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PortfolioAction{}
	for rows.Next() {
		var i PortfolioAction
		if err := rows.Scan(
			&i.ID,
			&i.PortfolioID,
			&i.ActionID,
			&i.PlayerID,
			&i.Quantity,
			&i.PurchasePrice,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPortfolioActionsByPortfolio_id = `-- name: listPortfolioActionsByPortfolio_id :many
SELECT id, portfolio_id, action_id, player_id, quantity, purchase_price, created_at FROM "portfolioActions" WHERE portfolio_id = $1 LIMIT $2 OFFSET $3
`

type listPortfolioActionsByPortfolio_idParams struct {
	PortfolioID int64 `json:"portfolioID"`
	Limit       int32 `json:"limit"`
	Offset      int32 `json:"offset"`
}

func (q *Queries) listPortfolioActionsByPortfolio_id(ctx context.Context, arg listPortfolioActionsByPortfolio_idParams) ([]PortfolioAction, error) {
	rows, err := q.db.QueryContext(ctx, listPortfolioActionsByPortfolio_id, arg.PortfolioID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PortfolioAction{}
	for rows.Next() {
		var i PortfolioAction
		if err := rows.Scan(
			&i.ID,
			&i.PortfolioID,
			&i.ActionID,
			&i.PlayerID,
			&i.Quantity,
			&i.PurchasePrice,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePortfolioAction = `-- name: updatePortfolioAction :one
UPDATE "portfolioActions" SET
  portfolio_id = COALESCE($1, portfolio_id),
  action_id = COALESCE($2, action_id),
  player_id = COALESCE($3, player_id),
  quantity = COALESCE($4, quantity),
  purchase_price = COALESCE($5, purchase_price)
WHERE id = $6
RETURNING id, portfolio_id, action_id, player_id, quantity, purchase_price, created_at
`

type updatePortfolioActionParams struct {
	PortfolioID   int64  `json:"portfolioID"`
	ActionID      int64  `json:"actionID"`
	PlayerID      int64  `json:"playerID"`
	Quantity      int32  `json:"quantity"`
	PurchasePrice string `json:"purchasePrice"`
	ID            int32  `json:"id"`
}

func (q *Queries) updatePortfolioAction(ctx context.Context, arg updatePortfolioActionParams) (PortfolioAction, error) {
	row := q.db.QueryRowContext(ctx, updatePortfolioAction,
		arg.PortfolioID,
		arg.ActionID,
		arg.PlayerID,
		arg.Quantity,
		arg.PurchasePrice,
		arg.ID,
	)
	var i PortfolioAction
	err := row.Scan(
		&i.ID,
		&i.PortfolioID,
		&i.ActionID,
		&i.PlayerID,
		&i.Quantity,
		&i.PurchasePrice,
		&i.CreatedAt,
	)
	return i, err
}
