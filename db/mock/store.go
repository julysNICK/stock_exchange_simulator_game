// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/julysNICK/stock_exchange_simulator_game/db/sqlc (interfaces: StoreDB)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	db "github.com/julysNICK/stock_exchange_simulator_game/db/sqlc"
)

// MockStoreDB is a mock of StoreDB interface.
type MockStoreDB struct {
	ctrl     *gomock.Controller
	recorder *MockStoreDBMockRecorder
}

// MockStoreDBMockRecorder is the mock recorder for MockStoreDB.
type MockStoreDBMockRecorder struct {
	mock *MockStoreDB
}

// NewMockStoreDB creates a new mock instance.
func NewMockStoreDB(ctrl *gomock.Controller) *MockStoreDB {
	mock := &MockStoreDB{ctrl: ctrl}
	mock.recorder = &MockStoreDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoreDB) EXPECT() *MockStoreDBMockRecorder {
	return m.recorder
}

// CountActions mocks base method.
func (m *MockStoreDB) CountActions(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountActions", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountActions indicates an expected call of CountActions.
func (mr *MockStoreDBMockRecorder) CountActions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountActions", reflect.TypeOf((*MockStoreDB)(nil).CountActions), arg0)
}

// CountBuy mocks base method.
func (m *MockStoreDB) CountBuy(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountBuy", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountBuy indicates an expected call of CountBuy.
func (mr *MockStoreDBMockRecorder) CountBuy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountBuy", reflect.TypeOf((*MockStoreDB)(nil).CountBuy), arg0)
}

// CountPlayers mocks base method.
func (m *MockStoreDB) CountPlayers(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountPlayers", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountPlayers indicates an expected call of CountPlayers.
func (mr *MockStoreDBMockRecorder) CountPlayers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountPlayers", reflect.TypeOf((*MockStoreDB)(nil).CountPlayers), arg0)
}

// CountPortfolio mocks base method.
func (m *MockStoreDB) CountPortfolio(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountPortfolio", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountPortfolio indicates an expected call of CountPortfolio.
func (mr *MockStoreDBMockRecorder) CountPortfolio(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountPortfolio", reflect.TypeOf((*MockStoreDB)(nil).CountPortfolio), arg0)
}

// CountPortfolioActions mocks base method.
func (m *MockStoreDB) CountPortfolioActions(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountPortfolioActions", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountPortfolioActions indicates an expected call of CountPortfolioActions.
func (mr *MockStoreDBMockRecorder) CountPortfolioActions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountPortfolioActions", reflect.TypeOf((*MockStoreDB)(nil).CountPortfolioActions), arg0)
}

// CreateAction mocks base method.
func (m *MockStoreDB) CreateAction(arg0 context.Context, arg1 db.CreateActionParams) (db.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAction", arg0, arg1)
	ret0, _ := ret[0].(db.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAction indicates an expected call of CreateAction.
func (mr *MockStoreDBMockRecorder) CreateAction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAction", reflect.TypeOf((*MockStoreDB)(nil).CreateAction), arg0, arg1)
}

// CreateBuy mocks base method.
func (m *MockStoreDB) CreateBuy(arg0 context.Context, arg1 db.CreateBuyParams) (db.Buy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBuy", arg0, arg1)
	ret0, _ := ret[0].(db.Buy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBuy indicates an expected call of CreateBuy.
func (mr *MockStoreDBMockRecorder) CreateBuy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBuy", reflect.TypeOf((*MockStoreDB)(nil).CreateBuy), arg0, arg1)
}

// CreatePlayer mocks base method.
func (m *MockStoreDB) CreatePlayer(arg0 context.Context, arg1 db.CreatePlayerParams) (db.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlayer", arg0, arg1)
	ret0, _ := ret[0].(db.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePlayer indicates an expected call of CreatePlayer.
func (mr *MockStoreDBMockRecorder) CreatePlayer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlayer", reflect.TypeOf((*MockStoreDB)(nil).CreatePlayer), arg0, arg1)
}

// CreatePortfolio mocks base method.
func (m *MockStoreDB) CreatePortfolio(arg0 context.Context, arg1 int64) (db.Portfolio, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePortfolio", arg0, arg1)
	ret0, _ := ret[0].(db.Portfolio)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePortfolio indicates an expected call of CreatePortfolio.
func (mr *MockStoreDBMockRecorder) CreatePortfolio(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePortfolio", reflect.TypeOf((*MockStoreDB)(nil).CreatePortfolio), arg0, arg1)
}

// CreatePortfolioAction mocks base method.
func (m *MockStoreDB) CreatePortfolioAction(arg0 context.Context, arg1 db.CreatePortfolioActionParams) (db.PortfolioAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePortfolioAction", arg0, arg1)
	ret0, _ := ret[0].(db.PortfolioAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePortfolioAction indicates an expected call of CreatePortfolioAction.
func (mr *MockStoreDBMockRecorder) CreatePortfolioAction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePortfolioAction", reflect.TypeOf((*MockStoreDB)(nil).CreatePortfolioAction), arg0, arg1)
}

// DeleteAction mocks base method.
func (m *MockStoreDB) DeleteAction(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAction indicates an expected call of DeleteAction.
func (mr *MockStoreDBMockRecorder) DeleteAction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAction", reflect.TypeOf((*MockStoreDB)(nil).DeleteAction), arg0, arg1)
}

// DeleteBuy mocks base method.
func (m *MockStoreDB) DeleteBuy(arg0 context.Context, arg1 int64) (db.Buy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBuy", arg0, arg1)
	ret0, _ := ret[0].(db.Buy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBuy indicates an expected call of DeleteBuy.
func (mr *MockStoreDBMockRecorder) DeleteBuy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBuy", reflect.TypeOf((*MockStoreDB)(nil).DeleteBuy), arg0, arg1)
}

// DeletePlayer mocks base method.
func (m *MockStoreDB) DeletePlayer(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePlayer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePlayer indicates an expected call of DeletePlayer.
func (mr *MockStoreDBMockRecorder) DeletePlayer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePlayer", reflect.TypeOf((*MockStoreDB)(nil).DeletePlayer), arg0, arg1)
}

// DeletePortfolio mocks base method.
func (m *MockStoreDB) DeletePortfolio(arg0 context.Context, arg1 int64) (db.Portfolio, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePortfolio", arg0, arg1)
	ret0, _ := ret[0].(db.Portfolio)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePortfolio indicates an expected call of DeletePortfolio.
func (mr *MockStoreDBMockRecorder) DeletePortfolio(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePortfolio", reflect.TypeOf((*MockStoreDB)(nil).DeletePortfolio), arg0, arg1)
}

// DeletePortfolioAction mocks base method.
func (m *MockStoreDB) DeletePortfolioAction(arg0 context.Context, arg1 int64) (db.PortfolioAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePortfolioAction", arg0, arg1)
	ret0, _ := ret[0].(db.PortfolioAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePortfolioAction indicates an expected call of DeletePortfolioAction.
func (mr *MockStoreDBMockRecorder) DeletePortfolioAction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePortfolioAction", reflect.TypeOf((*MockStoreDB)(nil).DeletePortfolioAction), arg0, arg1)
}

// GetActionById mocks base method.
func (m *MockStoreDB) GetActionById(arg0 context.Context, arg1 int64) (db.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActionById", arg0, arg1)
	ret0, _ := ret[0].(db.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActionById indicates an expected call of GetActionById.
func (mr *MockStoreDBMockRecorder) GetActionById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActionById", reflect.TypeOf((*MockStoreDB)(nil).GetActionById), arg0, arg1)
}

// GetActionByName mocks base method.
func (m *MockStoreDB) GetActionByName(arg0 context.Context, arg1 string) (db.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActionByName", arg0, arg1)
	ret0, _ := ret[0].(db.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActionByName indicates an expected call of GetActionByName.
func (mr *MockStoreDBMockRecorder) GetActionByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActionByName", reflect.TypeOf((*MockStoreDB)(nil).GetActionByName), arg0, arg1)
}

// GetBuyByActionId mocks base method.
func (m *MockStoreDB) GetBuyByActionId(arg0 context.Context, arg1 int64) ([]db.Buy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuyByActionId", arg0, arg1)
	ret0, _ := ret[0].([]db.Buy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuyByActionId indicates an expected call of GetBuyByActionId.
func (mr *MockStoreDBMockRecorder) GetBuyByActionId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuyByActionId", reflect.TypeOf((*MockStoreDB)(nil).GetBuyByActionId), arg0, arg1)
}

// GetBuyById mocks base method.
func (m *MockStoreDB) GetBuyById(arg0 context.Context, arg1 int64) (db.Buy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuyById", arg0, arg1)
	ret0, _ := ret[0].(db.Buy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuyById indicates an expected call of GetBuyById.
func (mr *MockStoreDBMockRecorder) GetBuyById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuyById", reflect.TypeOf((*MockStoreDB)(nil).GetBuyById), arg0, arg1)
}

// GetBuyByProfile_id mocks base method.
func (m *MockStoreDB) GetBuyByProfile_id(arg0 context.Context, arg1 int64) ([]db.Buy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuyByProfile_id", arg0, arg1)
	ret0, _ := ret[0].([]db.Buy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuyByProfile_id indicates an expected call of GetBuyByProfile_id.
func (mr *MockStoreDBMockRecorder) GetBuyByProfile_id(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuyByProfile_id", reflect.TypeOf((*MockStoreDB)(nil).GetBuyByProfile_id), arg0, arg1)
}

// GetPlayerByEmail mocks base method.
func (m *MockStoreDB) GetPlayerByEmail(arg0 context.Context, arg1 string) (db.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayerByEmail", arg0, arg1)
	ret0, _ := ret[0].(db.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayerByEmail indicates an expected call of GetPlayerByEmail.
func (mr *MockStoreDBMockRecorder) GetPlayerByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayerByEmail", reflect.TypeOf((*MockStoreDB)(nil).GetPlayerByEmail), arg0, arg1)
}

// GetPlayerById mocks base method.
func (m *MockStoreDB) GetPlayerById(arg0 context.Context, arg1 int64) (db.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayerById", arg0, arg1)
	ret0, _ := ret[0].(db.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayerById indicates an expected call of GetPlayerById.
func (mr *MockStoreDBMockRecorder) GetPlayerById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayerById", reflect.TypeOf((*MockStoreDB)(nil).GetPlayerById), arg0, arg1)
}

// GetPlayerByUsername mocks base method.
func (m *MockStoreDB) GetPlayerByUsername(arg0 context.Context, arg1 sql.NullString) (db.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayerByUsername", arg0, arg1)
	ret0, _ := ret[0].(db.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayerByUsername indicates an expected call of GetPlayerByUsername.
func (mr *MockStoreDBMockRecorder) GetPlayerByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayerByUsername", reflect.TypeOf((*MockStoreDB)(nil).GetPlayerByUsername), arg0, arg1)
}

// GetPortfolioActionByAction_id mocks base method.
func (m *MockStoreDB) GetPortfolioActionByAction_id(arg0 context.Context, arg1 int64) ([]db.PortfolioAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPortfolioActionByAction_id", arg0, arg1)
	ret0, _ := ret[0].([]db.PortfolioAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPortfolioActionByAction_id indicates an expected call of GetPortfolioActionByAction_id.
func (mr *MockStoreDBMockRecorder) GetPortfolioActionByAction_id(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPortfolioActionByAction_id", reflect.TypeOf((*MockStoreDB)(nil).GetPortfolioActionByAction_id), arg0, arg1)
}

// GetPortfolioActionById mocks base method.
func (m *MockStoreDB) GetPortfolioActionById(arg0 context.Context, arg1 int64) (db.PortfolioAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPortfolioActionById", arg0, arg1)
	ret0, _ := ret[0].(db.PortfolioAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPortfolioActionById indicates an expected call of GetPortfolioActionById.
func (mr *MockStoreDBMockRecorder) GetPortfolioActionById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPortfolioActionById", reflect.TypeOf((*MockStoreDB)(nil).GetPortfolioActionById), arg0, arg1)
}

// GetPortfolioActionByPlayer_id mocks base method.
func (m *MockStoreDB) GetPortfolioActionByPlayer_id(arg0 context.Context, arg1 int64) ([]db.PortfolioAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPortfolioActionByPlayer_id", arg0, arg1)
	ret0, _ := ret[0].([]db.PortfolioAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPortfolioActionByPlayer_id indicates an expected call of GetPortfolioActionByPlayer_id.
func (mr *MockStoreDBMockRecorder) GetPortfolioActionByPlayer_id(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPortfolioActionByPlayer_id", reflect.TypeOf((*MockStoreDB)(nil).GetPortfolioActionByPlayer_id), arg0, arg1)
}

// GetPortfolioActionByPortfolio_id mocks base method.
func (m *MockStoreDB) GetPortfolioActionByPortfolio_id(arg0 context.Context, arg1 int64) ([]db.PortfolioAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPortfolioActionByPortfolio_id", arg0, arg1)
	ret0, _ := ret[0].([]db.PortfolioAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPortfolioActionByPortfolio_id indicates an expected call of GetPortfolioActionByPortfolio_id.
func (mr *MockStoreDBMockRecorder) GetPortfolioActionByPortfolio_id(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPortfolioActionByPortfolio_id", reflect.TypeOf((*MockStoreDB)(nil).GetPortfolioActionByPortfolio_id), arg0, arg1)
}

// GetPortfolioById mocks base method.
func (m *MockStoreDB) GetPortfolioById(arg0 context.Context, arg1 int64) (db.Portfolio, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPortfolioById", arg0, arg1)
	ret0, _ := ret[0].(db.Portfolio)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPortfolioById indicates an expected call of GetPortfolioById.
func (mr *MockStoreDBMockRecorder) GetPortfolioById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPortfolioById", reflect.TypeOf((*MockStoreDB)(nil).GetPortfolioById), arg0, arg1)
}

// GetPortfolioByPlayerId mocks base method.
func (m *MockStoreDB) GetPortfolioByPlayerId(arg0 context.Context, arg1 int64) (db.Portfolio, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPortfolioByPlayerId", arg0, arg1)
	ret0, _ := ret[0].(db.Portfolio)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPortfolioByPlayerId indicates an expected call of GetPortfolioByPlayerId.
func (mr *MockStoreDBMockRecorder) GetPortfolioByPlayerId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPortfolioByPlayerId", reflect.TypeOf((*MockStoreDB)(nil).GetPortfolioByPlayerId), arg0, arg1)
}

// ListActions mocks base method.
func (m *MockStoreDB) ListActions(arg0 context.Context, arg1 db.ListActionsParams) ([]db.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListActions", arg0, arg1)
	ret0, _ := ret[0].([]db.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActions indicates an expected call of ListActions.
func (mr *MockStoreDBMockRecorder) ListActions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActions", reflect.TypeOf((*MockStoreDB)(nil).ListActions), arg0, arg1)
}

// ListBuy mocks base method.
func (m *MockStoreDB) ListBuy(arg0 context.Context, arg1 db.ListBuyParams) ([]db.Buy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBuy", arg0, arg1)
	ret0, _ := ret[0].([]db.Buy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBuy indicates an expected call of ListBuy.
func (mr *MockStoreDBMockRecorder) ListBuy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBuy", reflect.TypeOf((*MockStoreDB)(nil).ListBuy), arg0, arg1)
}

// ListBuyByProfile_id mocks base method.
func (m *MockStoreDB) ListBuyByProfile_id(arg0 context.Context, arg1 db.ListBuyByProfile_idParams) ([]db.Buy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBuyByProfile_id", arg0, arg1)
	ret0, _ := ret[0].([]db.Buy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBuyByProfile_id indicates an expected call of ListBuyByProfile_id.
func (mr *MockStoreDBMockRecorder) ListBuyByProfile_id(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBuyByProfile_id", reflect.TypeOf((*MockStoreDB)(nil).ListBuyByProfile_id), arg0, arg1)
}

// ListPlayers mocks base method.
func (m *MockStoreDB) ListPlayers(arg0 context.Context, arg1 db.ListPlayersParams) ([]db.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPlayers", arg0, arg1)
	ret0, _ := ret[0].([]db.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPlayers indicates an expected call of ListPlayers.
func (mr *MockStoreDBMockRecorder) ListPlayers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPlayers", reflect.TypeOf((*MockStoreDB)(nil).ListPlayers), arg0, arg1)
}

// ListPortfolio mocks base method.
func (m *MockStoreDB) ListPortfolio(arg0 context.Context, arg1 db.ListPortfolioParams) ([]db.Portfolio, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPortfolio", arg0, arg1)
	ret0, _ := ret[0].([]db.Portfolio)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPortfolio indicates an expected call of ListPortfolio.
func (mr *MockStoreDBMockRecorder) ListPortfolio(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPortfolio", reflect.TypeOf((*MockStoreDB)(nil).ListPortfolio), arg0, arg1)
}

// ListPortfolioActions mocks base method.
func (m *MockStoreDB) ListPortfolioActions(arg0 context.Context, arg1 db.ListPortfolioActionsParams) ([]db.PortfolioAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPortfolioActions", arg0, arg1)
	ret0, _ := ret[0].([]db.PortfolioAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPortfolioActions indicates an expected call of ListPortfolioActions.
func (mr *MockStoreDBMockRecorder) ListPortfolioActions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPortfolioActions", reflect.TypeOf((*MockStoreDB)(nil).ListPortfolioActions), arg0, arg1)
}

// ListPortfolioActionsByPortfolio_id mocks base method.
func (m *MockStoreDB) ListPortfolioActionsByPortfolio_id(arg0 context.Context, arg1 db.ListPortfolioActionsByPortfolio_idParams) ([]db.PortfolioAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPortfolioActionsByPortfolio_id", arg0, arg1)
	ret0, _ := ret[0].([]db.PortfolioAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPortfolioActionsByPortfolio_id indicates an expected call of ListPortfolioActionsByPortfolio_id.
func (mr *MockStoreDBMockRecorder) ListPortfolioActionsByPortfolio_id(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPortfolioActionsByPortfolio_id", reflect.TypeOf((*MockStoreDB)(nil).ListPortfolioActionsByPortfolio_id), arg0, arg1)
}

// RankPlayers mocks base method.
func (m *MockStoreDB) RankPlayers(arg0 context.Context, arg1 db.RankPlayersParams) ([]db.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RankPlayers", arg0, arg1)
	ret0, _ := ret[0].([]db.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RankPlayers indicates an expected call of RankPlayers.
func (mr *MockStoreDBMockRecorder) RankPlayers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RankPlayers", reflect.TypeOf((*MockStoreDB)(nil).RankPlayers), arg0, arg1)
}

// UpdateAction mocks base method.
func (m *MockStoreDB) UpdateAction(arg0 context.Context, arg1 db.UpdateActionParams) (db.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAction", arg0, arg1)
	ret0, _ := ret[0].(db.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAction indicates an expected call of UpdateAction.
func (mr *MockStoreDBMockRecorder) UpdateAction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAction", reflect.TypeOf((*MockStoreDB)(nil).UpdateAction), arg0, arg1)
}

// UpdateBuy mocks base method.
func (m *MockStoreDB) UpdateBuy(arg0 context.Context, arg1 db.UpdateBuyParams) (db.Buy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBuy", arg0, arg1)
	ret0, _ := ret[0].(db.Buy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBuy indicates an expected call of UpdateBuy.
func (mr *MockStoreDBMockRecorder) UpdateBuy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBuy", reflect.TypeOf((*MockStoreDB)(nil).UpdateBuy), arg0, arg1)
}

// UpdatePlayer mocks base method.
func (m *MockStoreDB) UpdatePlayer(arg0 context.Context, arg1 db.UpdatePlayerParams) (db.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlayer", arg0, arg1)
	ret0, _ := ret[0].(db.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePlayer indicates an expected call of UpdatePlayer.
func (mr *MockStoreDBMockRecorder) UpdatePlayer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlayer", reflect.TypeOf((*MockStoreDB)(nil).UpdatePlayer), arg0, arg1)
}

// UpdatePortfolio mocks base method.
func (m *MockStoreDB) UpdatePortfolio(arg0 context.Context, arg1 db.UpdatePortfolioParams) (db.Portfolio, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePortfolio", arg0, arg1)
	ret0, _ := ret[0].(db.Portfolio)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePortfolio indicates an expected call of UpdatePortfolio.
func (mr *MockStoreDBMockRecorder) UpdatePortfolio(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePortfolio", reflect.TypeOf((*MockStoreDB)(nil).UpdatePortfolio), arg0, arg1)
}

// UpdatePortfolioAction mocks base method.
func (m *MockStoreDB) UpdatePortfolioAction(arg0 context.Context, arg1 db.UpdatePortfolioActionParams) (db.PortfolioAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePortfolioAction", arg0, arg1)
	ret0, _ := ret[0].(db.PortfolioAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePortfolioAction indicates an expected call of UpdatePortfolioAction.
func (mr *MockStoreDBMockRecorder) UpdatePortfolioAction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePortfolioAction", reflect.TypeOf((*MockStoreDB)(nil).UpdatePortfolioAction), arg0, arg1)
}
